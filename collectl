#!/usr/bin/bash

daemon_name=collectl
COLLECTL_DAEMON_NAME=collectl
COLLECTL="/usr/bin/collectl"

# general config
. /etc/rc.conf
. /etc/rc.d/functions
. /etc/conf.d/$daemon_name.conf

# Set defaults if settings are missing
[ -z "$COLLECTL_OPTS" ] && COLLECTL_OPTS=

# Note that the process name we grep for changes when not 'collectl'
if [ -z "$COLLECTL_PNAME" ]; then
  PNAME=$COLLECTL_DAEMON_NAME
else
  PNAME="collectl-$COLLECTL_PNAME"
  COLLECTL_OPTS="--pname $COLLECTL_PNAME $COLLECTL_OPTS"
fi

PROCNAME=$PNAME
PID_FILE="/var/run/$PNAME.pid"

# If a pidfile, make sure it's not stale and if it is, collectl not running
if [ -f $PID_FILE ]; then
  PID=`cat $PID_FILE`
  PID=`ps ax opid,cmd | grep $PROCNAME | grep $PID | grep -v grep | awk '{ print $1 }'`
fi

do_sigterm_cycle() {
    COUNT=1
    while [ $COUNT -le 5 ]; do
      if [ -f $PID_FILE ]; then
	# KILL
	kill $PID &> /dev/null
	#
      else
	COUNT=5;
	break
      fi
      sleep 1
      COUNT=$(( $COUNT + 1 ))
    done
    return 0
}

case "$1" in
  start)
    stat_busy "Starting $daemon_name daemon"
    if [ -z "$PID" ]; then
      [ -f $PID_FILE ] && rm -f $PID_FILE
      # RUN
      $COLLECTL -D $COLLECTL_OPTS
      #
      if [ $? -gt 0 ]; then
        stat_fail
	exit 1
      else
	add_daemon $daemon_name
	stat_done
      fi
    else
      stat_fail
      exit 1
    fi
    ;;

  stop)
    stat_busy "Stopping $daemon_name daemon"
    if [ -z "$PID" ]; then
      stat_fail
      exit 1
    fi
    # SIGTERM cycle
    do_sigterm_cycle
    if [ -f $PID_FILE ]; then
      # KILL (KILL) if not responding to TERM signal.
      kill -9 $PID &> /dev/null
      #
      if [ $? -gt 0 ]; then
	stat_fail
	exit 2
      fi
    fi
    rm -f $PID_FILE &> /dev/null
    rm_daemon $daemon_name
    stat_done
    ;;

  flush)
    stat_busy "Flushing buffers for $daemon_name"
    if [ -z "$PID" ]; then
      status_stopped
    else
      kill -s USR1 $PID
      if [ $? -gt 0 ]; then
	stat_fail
	exit 1
      else
	stat_done
      fi
    fi
    ;;

  status)
    stat_busy "Checking $daemon_name status"
    ck_status $daemon_name
    ;;

  restart)
    $0 stop
    sleep 3
    $0 start
    ;;
  *)
    echo "usage: $0 {start|stop|flush|status|restart}"
esac
exit 0
